name: Build Android APK

on:
  workflow_dispatch:
  push:
    paths:
      - "quote_app.zip33"
      - "quote_app_fixed3333.zip"
      - "lockscreen-lockapp_GITHUB_READY_BUILDABLE.zip"
      - "lockscreen-lockapp_GITHUB_READY_DISABLE_OLDPKG.zip"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      - name: Pick project zip (auto-detect)
        id: pick
        shell: bash
        run: |
          set -e
          if [[ -f "quote_app_fixed3333.zip" ]]; then
            zip="quote_app_fixed3333.zip"
          elif [[ -f "quote_app.zip33" ]]; then
            zip="quote_app.zip33"
          elif [[ -f "lockscreen-lockapp_GITHUB_READY_DISABLE_OLDPKG.zip" ]]; then
            zip="lockscreen-lockapp_GITHUB_READY_DISABLE_OLDPKG.zip"
          elif [[ -f "lockscreen-lockapp_GITHUB_READY_BUILDABLE.zip" ]]; then
            zip="lockscreen-lockapp_GITHUB_READY_BUILDABLE.zip"
          else
            echo "❌ 未找到可识别的 zip：请把修复后的 zip 放在仓库根目录，文件名建议为 lockscreen-lockapp_GITHUB_READY_DISABLE_OLDPKG.zip 或 lockscreen-lockapp_GITHUB_READY_BUILDABLE.zip"
            exit 1
          fi
          echo "zip=$zip" >> "$GITHUB_OUTPUT"
          echo "Using ZIP: $zip"
          echo "—— ZIP 内容预览（前 50 行）——"
          unzip -l "$zip" | head -n 50

      - name: Unzip project to workspace root (no prompts)
        run: |
          # 清除旧的工程文件，但保留 .github（避免覆盖正在运行的 workflow）
          rm -rf app build.gradle* settings.gradle* gradle.properties gradle/ .gradle
          # 解压时：-o 强制覆盖、-q 静默、-x 排除 .github 目录，避免交互提示
          unzip -o -q "${{ steps.pick.outputs.zip }}" -x ".github/*" -d .
          echo "After unzip:"
          ls -lah

      - name: Show build tag
        run: |
          echo "BUILD_TAG:"
          test -f BUILD_TAG.txt && cat BUILD_TAG.txt || echo "NO BUILD_TAG"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ hashFiles('BUILD_TAG.txt') }}-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-cache-

      - name: Set up Gradle 8.4
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Make gradlew executable (if exists)
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Diagnostic — print source tree
        run: |
          echo "---- Legacy package (com.example.app) ----"
          find app/src/main/java/com/example/app -type f -name '*.kt' -print 2>/dev/null | sort || true
          echo "---- Active package (com.example.lockapp) ----"
          find app/src/main/java/com/example/lockapp -type f -name '*.kt' -print 2>/dev/null | sort || true
          echo "---- grep setFullScreenIntent ----"
          grep -RIn "setFullScreenIntent(" app/src/main/java || true

      - name: Clean
        run: |
          if [ -f ./gradlew ]; then ./gradlew clean; else gradle clean; fi

      - name: Build debug APK
        run: |
          if [ -f ./gradlew ]; then ./gradlew assembleDebug --no-daemon; else gradle assembleDebug --no-daemon; fi

      - name: Locate APKs
        run: |
          echo "Built APKs:"
          find app/build/outputs/apk -type f -name "*.apk" -print

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            app/build/outputs/apk/debug/*.apk
