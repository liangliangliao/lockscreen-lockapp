name: Build Android APKs (MultiRoot + AutoUnzip)

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      zip_glob:
        description: "Optional: only unzip zips matching this glob (default: *.zip). Example: lockscreen-*.zip"
        required: false
        type: string
      exclude_glob:
        description: "Optional: exclude zips matching this glob (default: ci-*.zip)"
        required: false
        type: string

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install unzip
        run: sudo apt-get update -y && sudo apt-get install -y unzip

      - name: Unzip projects
        id: unzip
        shell: bash
        run: |
          set -e
          shopt -s nullglob
          GLOB="${{ github.event.inputs.zip_glob }}"
          EXCL="${{ github.event.inputs.exclude_glob }}"
          : "${GLOB:=*.zip}"
          : "${EXCL:=ci-*.zip}"

          echo "Zip include glob: $GLOB"
          echo "Zip exclude glob: $EXCL"

          mkdir -p unzipped

          found_any=false
          for z in $GLOB; do
            # skip excludes
            if [[ "$z" == $EXCL ]]; then
              echo "Skipping excluded zip: $z"
              continue
            fi
            if [ ! -f "$z" ]; then
              continue
            fi
            found_any=true
            base=$(basename "$z")
            name="${base%.*}"
            dest="unzipped/$name"
            mkdir -p "$dest"
            echo "Unzipping $z -> $dest"
            unzip -o -q "$z" -d "$dest"
          done

          if [ "$found_any" = false ]; then
            echo "No zip files matched '$GLOB' (excluding '$EXCL'). That's OK if sources already exist in repo."
          fi

      - name: Discover Gradle roots (repo + unzipped)
        id: find
        shell: bash
        run: |
          set -e
          # Search for settings.gradle or settings.gradle.kts under repo and unzipped
          {
            git ls-files | grep -E '(^|/)(settings\.gradle(\.kts)?)$' || true
            find unzipped -type f \( -name settings.gradle -o -name settings.gradle.kts \) 2>/dev/null || true
          } | sed -E 's|/(settings\.gradle(\.kts)?)$||' | sort -u > roots.txt

          echo "=== Discovered Gradle roots ==="
          cat roots.txt || true

          if [ ! -s roots.txt ]; then
            echo "::error::No Gradle roots found. Make sure your zips contain a Gradle project (with settings.gradle/.kts) or commit sources."
            exit 1
          fi

      - name: Build matrix JSON
        id: setmatrix
        shell: bash
        run: |
          set -e
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          ARR=$(jq -R -s -c 'split("\n") | map(select(length>0)) | map({root:., safe:(gsub("[^A-Za-z0-9_.-]"; "_"))})' roots.txt)
          echo "Matrix include: $ARR"
          echo "matrix={\"include\":$ARR}" >> $GITHUB_OUTPUT

  build:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Show selected root
        run: |
          echo "Building root: ${{ matrix.root }}"
          ls -la "${{ matrix.root }}" || true

      - name: Try Gradle Wrapper
        id: trywrapper
        shell: bash
        run: |
          set -e
          ROOT="${{ matrix.root }}"
          if [ -f "$ROOT/gradlew" ]; then
            chmod +x "$ROOT/gradlew"
            echo "has_wrapper=true" >> $GITHUB_OUTPUT
          else
            echo "has_wrapper=false" >> $GITHUB_OUTPUT
          fi

      - name: Build (with Wrapper)
        if: steps.trywrapper.outputs.has_wrapper == 'true'
        working-directory: ${{ matrix.root }}
        run: ./gradlew assembleDebug --no-daemon

      - name: Install Gradle (fallback) and Build
        if: steps.trywrapper.outputs.has_wrapper != 'true'
        shell: bash
        run: |
          set -e
          echo "Gradle wrapper not found for ${{ matrix.root }}, installing Gradle via SDKMAN..."
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.4
          gradle --version
          gradle -p "${{ matrix.root }}" assembleDebug --no-daemon

      - name: Upload APKs for this root
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.safe }}
          path: |
            ${{ matrix.root }}/**/build/outputs/apk/**/debug/*.apk
            ${{ matrix.root }}/**/build/outputs/apk/debug/*.apk
