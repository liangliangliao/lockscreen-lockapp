name: Build Android APKs (AutoUnzip + Smart Fallback)

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      zip_glob:
        description: "Only unzip zips matching this glob (default: *.zip). Example: lockscreen-*.zip"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo top-level
        run: |
          set -e
          pwd
          ls -la

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip jq tree

      - name: List zips
        run: |
          shopt -s nullglob
          echo "Zips in repo root:"
          ls -la *.zip || true

      - name: Unzip projects
        id: unzip
        shell: bash
        run: |
          set -e
          shopt -s nullglob
          GLOB="${{ github.event.inputs.zip_glob }}"
          : "${GLOB:=*.zip}"

          echo "Zip include glob: $GLOB"
          mkdir -p unzipped

          found_any=false
          for z in $GLOB; do
            if [ ! -f "$z" ]; then
              continue
            fi
            found_any=true
            base=$(basename "$z")
            name="${base%.*}"
            dest="unzipped/$name"
            mkdir -p "$dest"
            echo "::group::Unzipping $z -> $dest"
            unzip -o -q "$z" -d "$dest"
            echo "::endgroup::"
          done

          if [ "$found_any" = false ]; then
            echo "No zip files matched '$GLOB'. If sources are already committed, that's fine."
          fi

      - name: Diagnose: show unzipped tree (first 4 levels)
        run: |
          echo "::group::unzipped/ tree"
          tree -a -L 4 unzipped || true
          echo "::endgroup::"

      - name: Discover Gradle roots (repo + unzipped)
        id: discover
        shell: bash
        run: |
          set -e
          {
            git ls-files | grep -E '(^|/)(settings\.gradle(\.kts)?)$' || true
            find unzipped -type f \( -name settings.gradle -o -name settings.gradle.kts \) 2>/dev/null || true
          } | sed -E 's|/(settings\.gradle(\.kts)?)$||' | sort -u > roots.txt

          echo "=== Discovered Gradle roots ==="
          cat roots.txt || true

          if [ ! -s roots.txt ]; then
            echo "NO_GRADLE_ROOTS" >> $GITHUB_OUTPUT
          else
            echo "HAS_GRADLE_ROOTS" >> $GITHUB_OUTPUT
          fi

      - name: Smart fallback: synthesize a Gradle root (if none found)
        if: steps.discover.outputs.NO_GRADLE_ROOTS == 'NO_GRADLE_ROOTS'
        id: synth
        shell: bash
        run: |
          set -e
          mkdir -p synth-root
          echo "Attempting to locate Android modules to include..."
          # Candidates: any dir containing build.gradle(.kts) AND (AndroidManifest.xml or src/main/AndroidManifest.xml)
          mapfile -t MODS < <(find . -type f \( -name "build.gradle" -o -name "build.gradle.kts" \) \
            -printf "%h\n" | sort -u | while read d; do
              if [ -f "$d/src/main/AndroidManifest.xml" ] || [ -f "$d/AndroidManifest.xml" ]; then
                # Avoid including synth-root itself
                case "$d" in
                  ./synth-root*) ;;
                  *) echo "$d" ;;
                esac
              fi
            done)

          if [ ${#MODS[@]} -eq 0 ]; then
            echo "::error::No Gradle roots and no Android modules found. Please ensure your zip contains a full Gradle project (with settings.gradle(.kts))."
            exit 1
          fi

          echo "Found modules:"
          printf '%s\n' "${MODS[@]}"

          # Build settings.gradle.kts
          {
            echo "rootProject.name = \"synth-root\""
            echo "pluginManagement {"
            echo "  repositories {"
            echo "    google()"
            echo "    mavenCentral()"
            echo "    gradlePluginPortal()"
            echo "  }"
            echo "}"
            echo ""
            for idx in "${!MODS[@]}"; do
              mod="m${idx}"
              echo "include(\":$mod\")"
            done
            echo ""
            for idx in "${!MODS[@]}"; do
              mod="m${idx}"
              rel=$(python3 - <<'PY'
import os,sys
print(os.path.relpath(sys.argv[1], "synth-root"))
PY
"${MODS[$idx]}")
              echo "project(\":$mod\").projectDir = file(\"$rel\")"
            done
          } > synth-root/settings.gradle.kts

          # minimal root build file to keep Gradle happy when the modules define everything
          cat > synth-root/build.gradle.kts <<'KTS'
plugins {
    // empty on purpose; modules declare their own plugins
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
KTS

          echo "synth_root=synth-root" >> $GITHUB_OUTPUT
          echo "Contents of synth-root:"
          ls -la synth-root
          echo "---- settings.gradle.kts ----"
          sed -n '1,200p' synth-root/settings.gradle.kts

      - name: Decide build roots
        id: roots
        shell: bash
        run: |
          set -e
          if [ -s roots.txt ]; then
            jq -R -s -c 'split("\n") | map(select(length>0)) | map({root:., safe:(gsub("[^A-Za-z0-9_.-]"; "_"))})' roots.txt > matrix.json
          else
            echo "[{\"root\":\"${{ steps.synth.outputs.synth_root }}\",\"safe\":\"synth-root\"}]" > matrix.json
          fi
          echo "Matrix:"
          cat matrix.json
          echo "matrix={\"include\":$(cat matrix.json)}" >> $GITHUB_OUTPUT

      - name: Set up build matrix
        id: set-matrix
        run: echo "Matrix prepared."

      - name: Upload diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics
          path: |
            roots.txt
            unzipped/**
            synth-root/**
          if-no-files-found: warn

  build-matrix:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix || '{"include":[{"root":"synth-root","safe":"synth-root"}]}' ) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore synthesized root (if any)
        uses: actions/download-artifact@v4
        with:
          name: diagnostics
          path: .

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Try Gradle Wrapper
        id: trywrapper
        shell: bash
        run: |
          set -e
          ROOT="${{ matrix.root }}"
          if [ -f "$ROOT/gradlew" ]; then
            chmod +x "$ROOT/gradlew"
            echo "has_wrapper=true" >> $GITHUB_OUTPUT
          else
            echo "has_wrapper=false" >> $GITHUB_OUTPUT
          fi

      - name: Build (with Wrapper)
        if: steps.trywrapper.outputs.has_wrapper == 'true'
        working-directory: ${{ matrix.root }}
        run: ./gradlew assembleDebug --no-daemon

      - name: Install Gradle (fallback) and Build
        if: steps.trywrapper.outputs.has_wrapper != 'true'
        shell: bash
        run: |
          set -e
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.4
          gradle --version
          gradle -p "${{ matrix.root }}" assembleDebug --no-daemon

      - name: Upload APKs for this root
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.safe }}
          path: |
            ${{ matrix.root }}/**/build/outputs/apk/**/debug/*.apk
            ${{ matrix.root }}/**/build/outputs/apk/debug/*.apk
          if-no-files-found: warn
